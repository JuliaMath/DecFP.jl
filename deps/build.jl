using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libbid"], :libbid),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/quinnj/DecFPBuilder/releases/download/v0.10"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/DecFP.v2.2.0.aarch64-linux-gnu.tar.gz", "1701556ada09949847312908b76919d5aa928d18632d61da0a73bece404e3b03"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/DecFP.v2.2.0.aarch64-linux-musl.tar.gz", "adbdee806532b7a34a4e152758d7c3e857d1b369d9e0e10731d5fae346e8fee4"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/DecFP.v2.2.0.arm-linux-gnueabihf.tar.gz", "e1fdca45fa3fafcb7d41c58e6d35606cebbb4ecea68f5b49880cb2fd3ade0cb2"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/DecFP.v2.2.0.arm-linux-musleabihf.tar.gz", "6b0824ac894a7c762e679a50ea8e7785fbae872b0bbd575575a889068ec14dd6"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/DecFP.v2.2.0.i686-linux-gnu.tar.gz", "e37dde2bfaa84202aa47b55fd84455831c5555a2928370b94310fe7802590cfd"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/DecFP.v2.2.0.i686-linux-musl.tar.gz", "3fcd38d9698a339a5eaf6dfb4f1600ff5c6244b1f5d5068b2a8b964e8afb6980"),
    Windows(:i686) => ("$bin_prefix/DecFP.v2.2.0.i686-w64-mingw32.tar.gz", "330307faf1cd5a40e3f915d5d24f09b9d61eff1e38528902cfa0a2dfcac892ad"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/DecFP.v2.2.0.powerpc64le-linux-gnu.tar.gz", "78efeea1e6fb8d1f7b94cfc8a3d56794ba58b58f57d366136a90b7af98ee9291"),
    MacOS(:x86_64) => ("$bin_prefix/DecFP.v2.2.0.x86_64-apple-darwin14.tar.gz", "5ba802cbaa28ca901e3bb37ea9ae7c979add12f250791978a16e093491d803d2"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/DecFP.v2.2.0.x86_64-linux-gnu.tar.gz", "39ad862dd623c4565b4fc3fbe8682e0ba615e283ba171bbf7b27e04781e9fd9f"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/DecFP.v2.2.0.x86_64-linux-musl.tar.gz", "478859fe5a2e992b099c2bc74ffcfe3771ed27a226b959c5ef10a3395e799895"),
    FreeBSD(:x86_64) => ("$bin_prefix/DecFP.v2.2.0.x86_64-unknown-freebsd11.1.tar.gz", "5bffcd936b5a316ed61cd50f817a8b962ee6bd92caf971e0fbe2e57bd457e6ed"),
    Windows(:x86_64) => ("$bin_prefix/DecFP.v2.2.0.x86_64-w64-mingw32.tar.gz", "c48882c9fa3bb8ed73e5790aad40863a7ff57f736977e4ba73ccf9d7ddc9be2d"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
