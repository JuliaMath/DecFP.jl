using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libbid"], :libbid),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/quinnj/DecFPBuilder/releases/download/v0.8"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/DecFP.v2.2.0.aarch64-linux-gnu.tar.gz", "5a1c1bca574fab3e69cd920b70aec962a3d10e977f6bc243ecc3036a8b6e4c46"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/DecFP.v2.2.0.aarch64-linux-musl.tar.gz", "920b52ae9c26e97cbfc33b89f5374d6a33a80581c9a2209c23b43cdac0b8d19b"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/DecFP.v2.2.0.arm-linux-gnueabihf.tar.gz", "1184ec6f3c7286cbce3cdccca21683d282ffe144c72cdd946b1a75748545e182"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/DecFP.v2.2.0.arm-linux-musleabihf.tar.gz", "702160b032ecf23f4be8743e9bae23b1f160c9365dc10eec28ca68a3ec96d1b9"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/DecFP.v2.2.0.i686-linux-gnu.tar.gz", "a54fe00681818029a9250de168ce4c503a978f879557835772b10ecfc1e65c4a"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/DecFP.v2.2.0.i686-linux-musl.tar.gz", "3ec176d322348611e7654b47ee83d9022bdcec75e0c4a3a185fa77c56a87a49f"),
    Windows(:i686) => ("$bin_prefix/DecFP.v2.2.0.i686-w64-mingw32.tar.gz", "bdb9e0b4af6eaab0834480f9d491b08322a6d48ba9d6516dfe240a1c02c0ee50"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/DecFP.v2.2.0.powerpc64le-linux-gnu.tar.gz", "e65fbf632657f4c53036c0b986891fc9ae2250c570e4dc716f1b390297b61b99"),
    MacOS(:x86_64) => ("$bin_prefix/DecFP.v2.2.0.x86_64-apple-darwin14.tar.gz", "1cbbe0e3da894b23735461ff487f9e34306c1e8b7ea5f9d0a6069dfdd767d5f3"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/DecFP.v2.2.0.x86_64-linux-gnu.tar.gz", "7b5d506fbde03efc45813e9800b6da4e343c559edad9d37ba435c24a876eb604"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/DecFP.v2.2.0.x86_64-linux-musl.tar.gz", "b90bf19d8de6dcd10c3cd647a2ad1664ab278e535bf3e7c933c3c9ea93ade327"),
    FreeBSD(:x86_64) => ("$bin_prefix/DecFP.v2.2.0.x86_64-unknown-freebsd11.1.tar.gz", "92a2b1dacda7e5e483535857055f861323637313905386f3e2e83c7c2f52b612"),
    Windows(:x86_64) => ("$bin_prefix/DecFP.v2.2.0.x86_64-w64-mingw32.tar.gz", "78b6a1be664d0ede9d3c82c08e3e49a7f736f9e34a456ad0d0a4d8c616c2dffa"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
